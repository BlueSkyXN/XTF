name: Multi-Platform Build

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  build-xtf:
    name: Build XTF
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x64
            platform: linux-x64
            setup_python_arch: x64
          - os: ubuntu-22.04-arm
            arch: arm64
            platform: linux-arm64
            setup_python_arch: arm64
          - os: windows-2022
            arch: x64
            platform: windows-x64
            setup_python_arch: x64
          - os: macos-15
            arch: arm64
            platform: macos-arm64
            setup_python_arch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set commit version
      id: version
      run: |
        VERSION=$(git log --format=%B -1 | head -1)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.setup_python_arch }}
    
    - name: Install dependencies for XTF
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
      shell: bash
    
    - name: Build XTF
      run: |
        pyinstaller --onefile \
          --strip \
          --hidden-import=core.config \
          --hidden-import=core.engine \
          --hidden-import=api.auth \
          --hidden-import=api.bitable \
          --hidden-import=api.sheet \
          XTF.py \
          --distpath dist/${{ matrix.platform }}
      shell: bash
    
    - name: Prepare XTF artifacts
      run: |
        platform="${{ matrix.platform }}"
        version="${{ env.VERSION }}"
        
        mkdir -p "artifacts/XTF-${platform}-${version}"
        
        if [[ "${{ matrix.platform }}" == "windows-x64" ]]; then
          cp "dist/${platform}/XTF.exe" "artifacts/XTF-${platform}-${version}/"
        else
          cp "dist/${platform}/XTF" "artifacts/XTF-${platform}-${version}/"
          chmod +x "artifacts/XTF-${platform}-${version}/XTF"
        fi
        
        cp config.example.yaml "artifacts/XTF-${platform}-${version}/config.yaml"
        
        cd artifacts
        if [[ "${{ matrix.platform }}" == "windows-x64" ]]; then
          powershell -Command "Compress-Archive -Path 'XTF-${platform}-${version}' -DestinationPath '../XTF-${platform}-${version}.zip' -Force"
        else
          zip -r "../XTF-${platform}-${version}.zip" "XTF-${platform}-${version}"/
        fi
        cd ..
      shell: bash
    
    - name: Upload XTF artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xtf-${{ matrix.platform }}-${{ env.VERSION }}
        path: XTF-${{ matrix.platform }}-${{ env.VERSION }}.zip
        compression-level: 0
        retention-days: 30

  build-xtf-sheet:
    name: Build XTF-Sheet (Legacy)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x64
            platform: linux-x64
            setup_python_arch: x64
          - os: ubuntu-22.04-arm
            arch: arm64
            platform: linux-arm64
            setup_python_arch: arm64
          - os: windows-2022
            arch: x64
            platform: windows-x64
            setup_python_arch: x64
          - os: macos-15
            arch: arm64
            platform: macos-arm64
            setup_python_arch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set commit version
      id: version
      run: |
        VERSION=$(git log --format=%B -1 | head -1)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.setup_python_arch }}
    
    - name: Install dependencies for XTF-Sheet (minimal)
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install pandas requests pyyaml
      shell: bash
    
    - name: Build XTF-Sheet
      run: |
        pyinstaller --onefile \
          --strip \
          lite/XTF_Sheet.py \
          --name XTF-Sheet \
          --distpath dist/${{ matrix.platform }}
      shell: bash
    
    - name: Prepare XTF-Sheet artifacts
      run: |
        platform="${{ matrix.platform }}"
        version="${{ env.VERSION }}"
        
        mkdir -p "artifacts/XTF-Sheet_py-${platform}-${version}"
        
        if [[ "${{ matrix.platform }}" == "windows-x64" ]]; then
          cp "dist/${platform}/XTF-Sheet.exe" "artifacts/XTF-Sheet_py-${platform}-${version}/"
        else
          cp "dist/${platform}/XTF-Sheet" "artifacts/XTF-Sheet_py-${platform}-${version}/"
          chmod +x "artifacts/XTF-Sheet_py-${platform}-${version}/XTF-Sheet"
        fi
        
        cp config.example.yaml "artifacts/XTF-Sheet_py-${platform}-${version}/config.yaml"
        
        cd artifacts
        if [[ "${{ matrix.platform }}" == "windows-x64" ]]; then
          powershell -Command "Compress-Archive -Path 'XTF-Sheet_py-${platform}-${version}' -DestinationPath '../XTF-Sheet_py-${platform}-${version}.zip' -Force"
        else
          zip -r "../XTF-Sheet_py-${platform}-${version}.zip" "XTF-Sheet_py-${platform}-${version}"/
        fi
        cd ..
      shell: bash
    
    - name: Upload XTF-Sheet artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xtf-sheet-${{ matrix.platform }}-${{ env.VERSION }}
        path: XTF-Sheet_py-${{ matrix.platform }}-${{ env.VERSION }}.zip
        compression-level: 0
        retention-days: 30

  build-xtf-bitable:
    name: Build XTF-Bitable (Legacy)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x64
            platform: linux-x64
            setup_python_arch: x64
          - os: ubuntu-22.04-arm
            arch: arm64
            platform: linux-arm64
            setup_python_arch: arm64
          - os: windows-2022
            arch: x64
            platform: windows-x64
            setup_python_arch: x64
          - os: macos-15
            arch: arm64
            platform: macos-arm64
            setup_python_arch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set commit version
      id: version
      run: |
        VERSION=$(git log --format=%B -1 | head -1)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.setup_python_arch }}
    
    - name: Install dependencies for XTF-Bitable (minimal)
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install pandas requests pyyaml
      shell: bash
    
    - name: Build XTF-Bitable
      run: |
        pyinstaller --onefile \
          --strip \
          lite/XTF_Bitable.py \
          --name XTF-Bitable \
          --distpath dist/${{ matrix.platform }}
      shell: bash
    
    - name: Prepare XTF-Bitable artifacts
      run: |
        platform="${{ matrix.platform }}"
        version="${{ env.VERSION }}"
        
        mkdir -p "artifacts/XTF-Bitable_py-${platform}-${version}"
        
        if [[ "${{ matrix.platform }}" == "windows-x64" ]]; then
          cp "dist/${platform}/XTF-Bitable.exe" "artifacts/XTF-Bitable_py-${platform}-${version}/"
        else
          cp "dist/${platform}/XTF-Bitable" "artifacts/XTF-Bitable_py-${platform}-${version}/"
          chmod +x "artifacts/XTF-Bitable_py-${platform}-${version}/XTF-Bitable"
        fi
        
        cp config.example.yaml "artifacts/XTF-Bitable_py-${platform}-${version}/config.yaml"
        
        cd artifacts
        if [[ "${{ matrix.platform }}" == "windows-x64" ]]; then
          powershell -Command "Compress-Archive -Path 'XTF-Bitable_py-${platform}-${version}' -DestinationPath '../XTF-Bitable_py-${platform}-${version}.zip' -Force"
        else
          zip -r "../XTF-Bitable_py-${platform}-${version}.zip" "XTF-Bitable_py-${platform}-${version}"/
        fi
        cd ..
      shell: bash
    
    - name: Upload XTF-Bitable artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xtf-bitable-${{ matrix.platform }}-${{ env.VERSION }}
        path: XTF-Bitable_py-${{ matrix.platform }}-${{ env.VERSION }}.zip
        compression-level: 0
        retention-days: 30
    
  create-platform-bundles:
    runs-on: ubuntu-latest
    needs: [build-xtf, build-xtf-sheet, build-xtf-bitable]
    strategy:
      matrix:
        platform: [linux-x64, linux-arm64, windows-x64, macos-arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set commit version
      id: version
      run: |
        VERSION=$(git log --format=%B -1 | head -1)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Download all artifacts for platform
      uses: actions/download-artifact@v4
      with:
        pattern: "*-${{ matrix.platform }}-${{ env.VERSION }}"
        merge-multiple: true
    
    - name: Create platform bundle
      run: |
        platform="${{ matrix.platform }}"
        version="${{ env.VERSION }}"
        
        # Extract individual program ZIPs
        unzip "XTF-${platform}-${version}.zip"
        unzip "XTF-Sheet_py-${platform}-${version}.zip"
        unzip "XTF-Bitable_py-${platform}-${version}.zip"
        
        # Create platform bundle directory
        mkdir -p "ALL-XTF-${platform}-${version}"
        
        # Copy all programs to bundle
        cp -r "XTF-${platform}-${version}"/* "ALL-XTF-${platform}-${version}/"
        cp -r "XTF-Sheet_py-${platform}-${version}"/* "ALL-XTF-${platform}-${version}/"
        cp -r "XTF-Bitable_py-${platform}-${version}"/* "ALL-XTF-${platform}-${version}/"
        
        # Create platform bundle ZIP
        zip -r "ALL-XTF-${platform}-${version}.zip" "ALL-XTF-${platform}-${version}"/
      shell: bash
    
    - name: Upload platform bundle
      uses: actions/upload-artifact@v4
      with:
        name: platform-bundle-${{ matrix.platform }}-${{ env.VERSION }}
        path: ALL-XTF-${{ matrix.platform }}-${{ env.VERSION }}.zip
        compression-level: 0
        retention-days: 30

  create-release-bundle:
    runs-on: ubuntu-latest
    needs: create-platform-bundles
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set commit version
      id: version
      run: |
        VERSION=$(git log --format=%B -1 | head -1)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Download all platform bundles
      uses: actions/download-artifact@v4
      with:
        pattern: platform-bundle-*-${{ env.VERSION }}
        merge-multiple: true
    
    - name: Create full release bundle
      run: |
        version="${{ env.VERSION }}"
        
        # Create full release directory
        mkdir -p "FULL-XTF-${version}"
        
        # Extract and organize all platform bundles
        for zip_file in ALL-XTF-*-${version}.zip; do
          if [[ -f "$zip_file" ]]; then
            unzip "$zip_file"
            platform_dir=$(basename "$zip_file" .zip)
            mv "$platform_dir" "FULL-XTF-${version}/"
          fi
        done
        
        # Create full release ZIP
        zip -r "FULL-XTF-${version}.zip" "FULL-XTF-${version}"/
      shell: bash
    
    - name: Upload full release bundle
      uses: actions/upload-artifact@v4
      with:
        name: full-release-${{ env.VERSION }}
        path: FULL-XTF-${{ env.VERSION }}.zip
        compression-level: 0
        retention-days: 30

  publish-release:
    runs-on: ubuntu-latest
    needs: create-platform-bundles
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set commit version
      id: version
      run: |
        VERSION=$(git log --format=%B -1 | head -1)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Download all platform bundles
      uses: actions/download-artifact@v4
      with:
        pattern: platform-bundle-*-${{ env.VERSION }}
        merge-multiple: true
    
    - name: Prepare release assets
      run: |
        version="${{ env.VERSION }}"
        
        # Rename platform bundles for release
        for platform in linux-x64 linux-arm64 windows-x64 macos-arm64; do
          if [[ -f "ALL-XTF-${platform}-${version}.zip" ]]; then
            mv "ALL-XTF-${platform}-${version}.zip" "xtf-${platform}-${version}.zip"
          fi
        done
      shell: bash
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          xtf-linux-x64-${{ env.VERSION }}.zip
          xtf-linux-arm64-${{ env.VERSION }}.zip
          xtf-windows-x64-${{ env.VERSION }}.zip
          xtf-macos-arm64-${{ env.VERSION }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Build with PyInstaller

on:
  # Manual trigger
  workflow_dispatch:
  
  # Trigger on changes to .py files in root directory
  push:
    paths:
      - '*.py'
    branches: [ main ]
  
  pull_request:
    paths:
      - '*.py'
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: arm64
            python-version: '3.11'
            artifact-name: 'XTF-macos-arm64-pyinstaller'
          - os: windows-latest
            arch: x86
            python-version: '3.11'
            artifact-name: 'XTF-windows-x86-pyinstaller'
          - os: ubuntu-latest
            arch: arm64
            python-version: '3.11'
            artifact-name: 'XTF-linux-arm64-pyinstaller'
          - os: ubuntu-latest
            arch: x86_64
            python-version: '3.11'
            artifact-name: 'XTF-linux-x86-pyinstaller'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch == 'x86' && 'x86' || 'x64' }}
    
    - name: Set up QEMU for ARM64 emulation (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
    
    - name: Build for Linux ARM64 using Docker
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
      run: |
        # Create a simple build script
        cat > build_arm64.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Install dependencies
        apt-get update
        apt-get install -y python3 python3-pip
        
        # Install PyInstaller and dependencies
        pip3 install pyinstaller pandas requests openpyxl
        
        # Build the executable
        cd /workspace
        python3 -m PyInstaller --onefile --name XTF XTF.py
        
        # Copy files to output
        mkdir -p /output
        cp dist/XTF /output/
        cp config.example.json /output/
        chmod +x /output/XTF
        EOF
        
        chmod +x build_arm64.sh
        
        # Build using ARM64 container
        docker run --rm --platform linux/arm64 \
          -v $(pwd):/workspace \
          -v $(pwd)/artifacts:/output \
          ubuntu:22.04 \
          bash /workspace/build_arm64.sh
    
    - name: Install dependencies (non-ARM64)
      if: ${{ !(matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64') }}
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt || pip install pandas requests openpyxl
    
    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        python -m PyInstaller --onefile --name XTF XTF.py
    
    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        python -m PyInstaller --onefile --name XTF XTF.py
    
    - name: Build with PyInstaller (Linux x86_64)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
      run: |
        python -m PyInstaller --onefile --name XTF XTF.py
    
    - name: Create artifact directory (non-ARM64)
      if: ${{ !(matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64') }}
      run: |
        mkdir -p artifacts
    
    - name: Copy executable to artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy dist\XTF.exe artifacts\
        copy config.example.json artifacts\
    
    - name: Copy executable to artifacts (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cp dist/XTF artifacts/
        cp config.example.json artifacts/
        chmod +x artifacts/XTF
    
    - name: Copy executable to artifacts (Linux x86_64)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
      run: |
        cp dist/XTF artifacts/
        cp config.example.json artifacts/
        chmod +x artifacts/XTF
    
    - name: Create README for artifact
      run: |
        cat > artifacts/README.md << 'EOF'
        # XTF - Excel To Feishu Sync Tool
        
        Built with PyInstaller for ${{ matrix.os }}-${{ matrix.arch }}
        
        ## Usage
        1. Copy config.example.json to config.json
        2. Edit config.json with your Feishu app credentials
        3. Run the executable:
           - Windows: `XTF.exe`
           - macOS/Linux: `./XTF`
        
        ## Build Information
        - OS: ${{ matrix.os }}
        - Architecture: ${{ matrix.arch }}
        - Python Version: ${{ matrix.python-version }}
        - Build Tool: PyInstaller
        - Build Date: $(date)
        - Commit SHA: ${{ github.sha }}
        EOF
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: artifacts/
        retention-days: 30
